// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SurveyStore.Modules.Equipment.Infrastructure.EF;

namespace SurveyStore.Modules.Equipment.Infrastructure.EF.Migrations
{
    [DbContext(typeof(EquipmentDbContext))]
    [Migration("20240507160153_AddKit")]
    partial class AddKit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("equipment")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SurveyStore.Modules.Equipment.Domain.Kit.Entities.Kit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Kit");

                    b.HasDiscriminator<string>("Type").HasValue("Kit");
                });

            modelBuilder.Entity("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.SurveyEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("SurveyEquipment");

                    b.HasDiscriminator<string>("Type").HasValue("SurveyEquipment");
                });

            modelBuilder.Entity("SurveyStore.Modules.Equipment.Domain.Kit.Entities.DetailPole", b =>
                {
                    b.HasBaseType("SurveyStore.Modules.Equipment.Domain.Kit.Entities.Kit");

                    b.HasDiscriminator().HasValue("DetailPole");
                });

            modelBuilder.Entity("SurveyStore.Modules.Equipment.Domain.Kit.Entities.Tripod", b =>
                {
                    b.HasBaseType("SurveyStore.Modules.Equipment.Domain.Kit.Entities.Kit");

                    b.HasDiscriminator().HasValue("Tripod");
                });

            modelBuilder.Entity("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.CableAvoidanceTool", b =>
                {
                    b.HasBaseType("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.SurveyEquipment");

                    b.HasDiscriminator().HasValue("cable avoidance tool");
                });

            modelBuilder.Entity("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.FieldController", b =>
                {
                    b.HasBaseType("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.SurveyEquipment");

                    b.Property<int>("ScreenSize")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("field controller");
                });

            modelBuilder.Entity("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.GNSS", b =>
                {
                    b.HasBaseType("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.SurveyEquipment");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("gnss");
                });

            modelBuilder.Entity("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.GroundPenetratingRadar", b =>
                {
                    b.HasBaseType("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.SurveyEquipment");

                    b.Property<decimal>("Frequency")
                        .HasColumnType("numeric");

                    b.Property<bool>("OffRoadMode")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("ground penetrating radar");
                });

            modelBuilder.Entity("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.TotalStation", b =>
                {
                    b.HasBaseType("SurveyStore.Modules.Equipment.Domain.SurveyEquipment.Entities.SurveyEquipment");

                    b.Property<decimal>("Accuracy")
                        .HasColumnType("numeric");

                    b.Property<int>("MaxRemoteDistance")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("total station");
                });
#pragma warning restore 612, 618
        }
    }
}
